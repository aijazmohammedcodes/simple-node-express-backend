name: CI Pipeline with Security & Quality Scans

on:
  push:
    branches: [ Dev, UAT ]
  pull_request:
    branches: [ Dev, UAT ]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3. Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v4.2.4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Install dependencies
      - name: Install dependencies
        run: npm install

      # 5. Run ESLint and save results (Code Quality Scanning)
      - name: Run ESLint
        run: |
          set -o pipefail
          npx eslint . --ext .js,.jsx,.ts,.tsx --exit-on-fatal-error -f stylish | tee lint-report.txt

      # 6. Upload ESLint results as artifact (Code Quality Scanning)
      - name: Upload Lint Report
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: lint-report
          path: lint-report.txt

      # # 7. CodeQL - Code Scanning
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: javascript

      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3
      #   with:
      #     output: codeql-results.sarif

      # - name: Upload CodeQL Report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: codeql-report
      #     path: codeql-results.sarif

      # 8. Dependency Scanning
      - name: Run npm audit
        run: npm audit --audit-level=high --json > npm-audit-report.json

      - name: Upload npm Audit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit-report.json

      # 9. Secrets Detection with Gitleaks
      - name: Install Gitleaks
        run: |
          VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep tag_name | cut -d '"' -f 4)
          curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/$VERSION/gitleaks_${VERSION#v}_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks
        run: gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json --no-git --exit-code 1

      - name: Upload Gitleaks Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      # 10. Build Docker Image
      - name: Build Docker Image
        run: docker build -t my-node-app .

      # 11. Lint Dockerfile
      - name: Install Hadolint
        run: curl -sSfL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint && chmod +x /usr/local/bin/hadolint
      - name: Lint Dockerfile
        run: hadolint Dockerfile

      # 12. Run tests inside Docker container
      - name: Run tests inside Docker
        run: docker run --rm my-node-app npm test

      # 13. Scan Docker Image for Vulnerabilities
      # Install Trivy
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh


      - name: Scan Docker Image
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL my-node-app

      # 14. Push Docker Image to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag Docker Image
        run: docker tag my-node-app ghcr.io/${{ github.repository_owner }}/my-node-app:latest

      - name: Push Docker Image
        run: docker push ghcr.io/${{ github.repository_owner }}/my-node-app:latest

      # 15. Run tests and generate JUnit report
      - name: Run tests
        run: |
          mkdir -p test-results
          npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=./test-results/results.xml

      # 16. Publish Test Results
      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-results
          path: test-results/results.xml

      # 17. Create build artifact for CD
      - name: Create artifact for deployment
        uses: actions/upload-artifact@v4.6.2
        with:
          name: backend-app
          path: |
            .
            !node_modules/
